services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - app_network
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    expose:
      - '5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    networks:
      - app_network
    volumes:
      - 'redis:/data'

  sidekiq:
    image: event-radar-api-dev
    build:
      context: .
    entrypoint: ['./docker-entrypoint-development-sidekiq.sh']
    command: 'sidekiq'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment: &common_env
      DATABASE_URL: postgres://postgres:postgres@db:5432
      REDIS_URL: redis://redis:6379
      RAILS_ENV: development
      RUBYOPT: '-W:no-deprecated -W:no-experimental --yjit'
    # depends_on: # uncomment this to debug sidekiq jobs
    #   - rails
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            # By default everything from Dockerignore will not be synced
            - public/assets/
        - action: sync+restart
          path: ./config
          target: /app/config
        - action: sync+restart
          path: ./db
          target: /app/db
        - action: rebuild
          path: Gemfile
    volumes:
      - bundle_cache:/bundle
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_network

  rails:
    image: event-radar-api-dev
    build:
      context: .
    entrypoint: ['./docker-entrypoint-development-rails.sh']
    command: 'rails s -b 0.0.0.0 -p 3000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      sidekiq:
        condition: service_started
    ports:
      - '3000:3000'
    environment:
      <<: *common_env
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            # By default everything from Dockerignore will not be synced
            - public/assets/
        - action: sync+restart
          path: ./config
          target: /app/config
        - action: sync+restart
          path: ./db
          target: /app/db
        - action: rebuild
          path: Gemfile
    volumes:
      - bundle_cache:/bundle
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_network
    stdin_open: true
    tty: true

networks:
  app_network:

volumes:
  redis:
  postgres:
  bundle_cache:
